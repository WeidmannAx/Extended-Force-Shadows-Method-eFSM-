classdef MOTICON
    %% properties
    properties
        data
    end
    %% static methods
    methods(Static)
        function A = polygonGeometry
            A = [-304, -80,-383, -68,-428, 3,-306, 3,NaN,NaN,NaN,NaN;...
                -308, 10,-428, 10,-396, 75,-321, 96,NaN,NaN,NaN,NaN;...
                -185, -76,-296, -80,-300, 1,-189, 1,NaN,NaN,NaN,NaN;...
                -190, 14,-300, 14,-314, 96,-206, 95,NaN,NaN,NaN,NaN;...
                -64, -84,-178, -75,-180, -4,-70, -4,NaN,NaN,NaN,NaN;...
                -74, 20,-185, 20,-199, 95,-95, 99,NaN,NaN,NaN,NaN;...
                101, -145,19, -111,-58, -85,-58, -67,19, -98,101, -101;...
                67, 66,-9, 62,-67, 24,-90, 98,-19, 109,50, 116;...
                273, -165,190, -167,107, -148,107, -101,271, -101,NaN,NaN;...
                270, -94,107, -94,100, -46,265, -46,NaN,NaN,NaN,NaN;...
                265, -40,99, -40,91, 5,257, 5,NaN,NaN,NaN,NaN;...
                256, 12,91, 12,77, 59,247, 59,NaN,NaN,NaN,NaN;...
                244, 66,75, 66,58, 116,157, 107,241, 82,NaN,NaN;...
                397, -85,368, -135,329, -155,280, -164,276, -85,NaN,NaN;...
                397, -76,276, -76,266, -5,370, -5,NaN,NaN,NaN,NaN;...
                364, 2,265, 2,248, 77,308, 47,NaN,NaN,NaN,NaN];
        end
        function [LeftMarks, RightMarks] = getLandmarks_CoP_Based
            LeftMarks = [0.2081 0.2252 0; 0.1340 -0.3548 0; -0.3917 -0.0201 0];
            RightMarks = [0.2485 0.1885 0; 0.1566 -0.3147 0; -0.3821 -0.0345 0];
        end
        function Area = cellAreas
            Area.left = [8.2737, 7.9078, 9.5582, 9.6660, 9.1890, 9.0523, ...
                3.8447, 8.5998   10.9123, 8.5726, 8.1348, 8.5732, 7.0758, ...
                7.4852, 8.6984, 4.5983];
            Area.right = Area.left;
            Area.info = 'areas given in cm^2';
        end
        function [lCOP, rCOP] = loadCoPs
            load('\\192.168.72.180\wearhealth\DATA\Alex Weidmann\2. Bionic\Mass Detection 05_11_2019\FW Update\COPNEW_0412+Seitlich.mat', 'lCOP', 'rCOP');
            lCOP(lCOP(:,1) <= -0.25, :) = [] ;
            % lCOP(lCOP(:,1) >= 0.25, :) = [] ;
            rCOP(rCOP(:,1) <= -0.25, :) = [] ;
        end
        function circle = loadCoinCellCoPs
            nx = [-0.120000, -0.120021, -0.120085, -0.120192, -0.120341, -0.120532, -0.120765, -0.121040, -0.121356, ...
                -0.121713, -0.122111, -0.122549, -0.123026, -0.123542, -0.124097, -0.124689, -0.125318, -0.125984, ...
                -0.126684, -0.127420, -0.128188, -0.128990, -0.129823, -0.130687, -0.131580, -0.132502, -0.133452, ...
                -0.134428, -0.135428, -0.136453, -0.137500, -0.138568, -0.139657, -0.140764, -0.141889, -0.143029, ...
                -0.144184, -0.145353, -0.146533, -0.147723, -0.148922, -0.150129, -0.151342, -0.152559, -0.153779, ...
                -0.155000, -0.156221, -0.157441, -0.158658, -0.159871, -0.161078, -0.162277, -0.163467, -0.164647, ...
                -0.165816, -0.166971, -0.168111, -0.169236, -0.170343, -0.171432, -0.172500, -0.173547, -0.174572, ...
                -0.175572, -0.176548, -0.177498, -0.178420, -0.179313, -0.180177, -0.181010, -0.181812, -0.182580, ...
                -0.183316, -0.184016, -0.184682, -0.185311, -0.185903, -0.186458, -0.186974, -0.187451, -0.187889, ...
                -0.188287, -0.188644, -0.188960, -0.189235, -0.189468, -0.189659, -0.189808, -0.189915, -0.189979, ...
                -0.190000, -0.189979, -0.189915, -0.189808, -0.189659, -0.189468, -0.189235, -0.188960, -0.188644, ...
                -0.188287, -0.187889, -0.187451, -0.186974, -0.186458, -0.185903, -0.185311, -0.184682, -0.184016, ...
                -0.183316, -0.182580, -0.181812, -0.181010, -0.180177, -0.179313, -0.178420, -0.177498, -0.176548, ...
                -0.175572, -0.174572, -0.173547, -0.172500, -0.171432, -0.170343, -0.169236, -0.168111, -0.166971, ...
                -0.165816, -0.164647, -0.163467, -0.162277, -0.161078, -0.159871, -0.158658, -0.157441, -0.156221, ...
                -0.155000, -0.153779, -0.152559, -0.151342, -0.150129, -0.148922, -0.147723, -0.146533, -0.145353, ...
                -0.144184, -0.143029, -0.141889, -0.140764, -0.139657, -0.138568, -0.137500, -0.136453, -0.135428, ...
                -0.134428, -0.133452, -0.132502, -0.131580, -0.130687, -0.129823, -0.128990, -0.128188, -0.127420, ...
                -0.126684, -0.125984, -0.125318, -0.124689, -0.124097, -0.123542, -0.123026, -0.122549, -0.122111, ...
                -0.121713, -0.121356, -0.121040, -0.120765, -0.120532, -0.120341, -0.120192, -0.120085, -0.120021, ...
                -0.120000, -0.120000, -0.120021, -0.120085, -0.120192, -0.120341, -0.120532, -0.120765, -0.121040, ...
                -0.121356, -0.121713, -0.122111, -0.122549, -0.123026, -0.123542, -0.124097, -0.124689, -0.125318, ...
                -0.125984, -0.126684, -0.127420, -0.128188, -0.128990, -0.129823, -0.130687, -0.131580, -0.132502, ...
                -0.133452, -0.134428, -0.135428, -0.136453, -0.137500, -0.138568, -0.139657, -0.140764, -0.141889, ...
                -0.143029, -0.144184, -0.145353, -0.146533, -0.147723, -0.148922, -0.150129, -0.151342, -0.152559, ...
                -0.153779, -0.155000, -0.156221, -0.157441, -0.158658, -0.159871, -0.161078, -0.162277, -0.163467, ...
                -0.164647, -0.165816, -0.166971, -0.168111, -0.169236, -0.170343, -0.171432, -0.172500, -0.173547, ...
                -0.174572, -0.175572, -0.176548, -0.177498, -0.178420, -0.179313, -0.180177, -0.181010, -0.181812, ...
                -0.182580, -0.183316, -0.184016, -0.184682, -0.185311, -0.185903, -0.186458, -0.186974, -0.187451, ...
                -0.187889, -0.188287, -0.188644, -0.188960, -0.189235, -0.189468, -0.189659, -0.189808, -0.189915, ...
                -0.189979, -0.190000, -0.189979, -0.189915, -0.189808, -0.189659, -0.189468, -0.189235, -0.188960, ...
                -0.188644, -0.188287, -0.187889, -0.187451, -0.186974, -0.186458, -0.185903, -0.185311, -0.184682, ...
                -0.184016, -0.183316, -0.182580, -0.181812, -0.181010, -0.180177, -0.179313, -0.178420, -0.177498, ...
                -0.176548, -0.175572, -0.174572, -0.173547, -0.172500, -0.171432, -0.170343, -0.169236, -0.168111, ...
                -0.166971, -0.165816, -0.164647, -0.163467, -0.162277, -0.161078, -0.159871, -0.158658, -0.157441, ...
                -0.156221, -0.155000, -0.153779, -0.152559, -0.151342, -0.150129, -0.148922, -0.147723, -0.146533, ...
                -0.145353, -0.144184, -0.143029, -0.141889, -0.140764, -0.139657, -0.138568, -0.137500, -0.136453, ...
                -0.135428, -0.134428, -0.133452, -0.132502, -0.131580, -0.130687, -0.129823, -0.128990, -0.128188, ...
                -0.127420, -0.126684, -0.125984, -0.125318, -0.124689, -0.124097, -0.123542, -0.123026, -0.122549, ...
                -0.122111, -0.121713, -0.121356, -0.121040, -0.120765, -0.120532, -0.120341, -0.120192, -0.120085, ...
                -0.120021, -0.120000];
            ny = [0.045000, 0.046221, 0.047441, 0.048658, 0.049871, 0.051078, 0.052277, 0.053467, 0.054647, 0.055816, ...
                0.056971, 0.058111, 0.059236, 0.060343, 0.061432, 0.062500, 0.063547, 0.064572, 0.065572, 0.066548, ...
                0.067498, 0.068420, 0.069313, 0.070177, 0.071010, 0.071812, 0.072580, 0.073316, 0.074016, 0.074682, ...
                0.075311, 0.075903, 0.076458, 0.076974, 0.077451, 0.077889, 0.078287, 0.078644, 0.078960, 0.079235, ...
                0.079468, 0.079659, 0.079808, 0.079915, 0.079979, 0.080000, 0.079979, 0.079915, 0.079808, 0.079659, ...
                0.079468, 0.079235, 0.078960, 0.078644, 0.078287, 0.077889, 0.077451, 0.076974, 0.076458, 0.075903, ...
                0.075311, 0.074682, 0.074016, 0.073316, 0.072580, 0.071812, 0.071010, 0.070177, 0.069313, 0.068420, ...
                0.067498, 0.066548, 0.065572, 0.064572, 0.063547, 0.062500, 0.061432, 0.060343, 0.059236, 0.058111, ...
                0.056971, 0.055816, 0.054647, 0.053467, 0.052277, 0.051078, 0.049871, 0.048658, 0.047441, 0.046221, ...
                0.045000, 0.043779, 0.042559, 0.041342, 0.040129, 0.038922, 0.037723, 0.036533, 0.035353, 0.034184, ...
                0.033029, 0.031889, 0.030764, 0.029657, 0.028568, 0.027500, 0.026453, 0.025428, 0.024428, 0.023452, ...
                0.022502, 0.021580, 0.020687, 0.019823, 0.018990, 0.018188, 0.017420, 0.016684, 0.015984, 0.015318, ...
                0.014689, 0.014097, 0.013542, 0.013026, 0.012549, 0.012111, 0.011713, 0.011356, 0.011040, 0.010765, ...
                0.010532, 0.010341, 0.010192, 0.010085, 0.010021, 0.010000, 0.010021, 0.010085, 0.010192, 0.010341, ...
                0.010532, 0.010765, 0.011040, 0.011356, 0.011713, 0.012111, 0.012549, 0.013026, 0.013542, 0.014097, ...
                0.014689, 0.015318, 0.015984, 0.016684, 0.017420, 0.018188, 0.018990, 0.019823, 0.020687, 0.021580, ...
                0.022502, 0.023452, 0.024428, 0.025428, 0.026453, 0.027500, 0.028568, 0.029657, 0.030764, 0.031889, ...
                0.033029, 0.034184, 0.035353, 0.036533, 0.037723, 0.038922, 0.040129, 0.041342, 0.042559, 0.043779, ...
                0.045000, 0.045000, 0.046221, 0.047441, 0.048658, 0.049871, 0.051078, 0.052277, 0.053467, 0.054647, ...
                0.055816, 0.056971, 0.058111, 0.059236, 0.060343, 0.061432, 0.062500, 0.063547, 0.064572, 0.065572, ...
                0.066548, 0.067498, 0.068420, 0.069313, 0.070177, 0.071010, 0.071812, 0.072580, 0.073316, 0.074016, ...
                0.074682, 0.075311, 0.075903, 0.076458, 0.076974, 0.077451, 0.077889, 0.078287, 0.078644, 0.078960, ...
                0.079235, 0.079468, 0.079659, 0.079808, 0.079915, 0.079979, 0.080000, 0.079979, 0.079915, 0.079808, ...
                0.079659, 0.079468, 0.079235, 0.078960, 0.078644, 0.078287, 0.077889, 0.077451, 0.076974, 0.076458, ...
                0.075903, 0.075311, 0.074682, 0.074016, 0.073316, 0.072580, 0.071812, 0.071010, 0.070177, 0.069313, ...
                0.068420, 0.067498, 0.066548, 0.065572, 0.064572, 0.063547, 0.062500, 0.061432, 0.060343, 0.059236, ...
                0.058111, 0.056971, 0.055816, 0.054647, 0.053467, 0.052277, 0.051078, 0.049871, 0.048658, 0.047441, ...
                0.046221, 0.045000, 0.043779, 0.042559, 0.041342, 0.040129, 0.038922, 0.037723, 0.036533, 0.035353, ...
                0.034184, 0.033029, 0.031889, 0.030764, 0.029657, 0.028568, 0.027500, 0.026453, 0.025428, 0.024428, ...
                0.023452, 0.022502, 0.021580, 0.020687, 0.019823, 0.018990, 0.018188, 0.017420, 0.016684, 0.015984, ...
                0.015318, 0.014689, 0.014097, 0.013542, 0.013026, 0.012549, 0.012111, 0.011713, 0.011356, 0.011040, ...
                0.010765, 0.010532, 0.010341, 0.010192, 0.010085, 0.010021, 0.010000, 0.010021, 0.010085, 0.010192, ...
                0.010341, 0.010532, 0.010765, 0.011040, 0.011356, 0.011713, 0.012111, 0.012549, 0.013026, 0.013542, ...
                0.014097, 0.014689, 0.015318, 0.015984, 0.016684, 0.017420, 0.018188, 0.018990, 0.019823, 0.020687, ...
                0.021580, 0.022502, 0.023452, 0.024428, 0.025428, 0.026453, 0.027500, 0.028568, 0.029657, 0.030764, ...
                0.031889, 0.033029, 0.034184, 0.035353, 0.036533, 0.037723, 0.038922, 0.040129, 0.041342, 0.042559, ...
                0.043779, 0.045000];
            circle = [nx', ny'];
        end
    end
    methods
        function Dat = parseMoticon(obj, file)
            FID = fopen(file);
            
            %% header 1
            A = textscan(fgetl(FID), '%s');
            
            Dat.date = strcat(A{1}(3), ' ', A{1}(4), ' ', A{1}(5), ' ', A{1}(6));
            Dat.insoleNo(1) = A{1}(10); Dat.insoleNo(2) = A{1}(11);
            Dat.insoleSize = A{1}(13);
            
            %% header 2
            Header = textscan(fgetl(FID), '%s');
            % Header = A;
            
            Dat.time = []; Dat.leftPress = []; Dat.leftAcc = []; Dat.leftTotalForce = []; Dat.leftCoP = []; Dat.leftGyr = [];
            Dat.rightPress = []; Dat.rightAcc = []; Dat.rightTotalForce = []; Dat.rightCoP = []; Dat.rest = []; Dat.rightGyr = [];
            %% data
            while ~feof(FID)
                A = textscan(fgetl(FID), '%f');
                
                if length(A{1}) == 45
                    Dat.time(end+1, 1) = A{1}(1);
                    Dat.leftPress(end+1, 1:16) = A{1}(2:17);
                    Dat.leftAcc(end+1, 1:3) = A{1}(18:20);
                    Dat.leftTotalForce(end+1, 1) = A{1}(21);
                    Dat.leftCoP(end+1, 1:2) = A{1}(22:23);
                    
                    Dat.rightPress(end+1, 1:16) = A{1}(24:39);
                    Dat.rightAcc(end+1, 1:3) = A{1}(40:42);
                    Dat.rightTotalForce(end+1, 1) = A{1}(43);
                    Dat.rightCoP(end+1, 1:2) = A{1}(44:45);
                elseif length(A{1}) == 51
                    Dat.time(end+1, 1) = A{1}(1);
                    Dat.leftPress(end+1, 1:16) = A{1}(2:17);
                    Dat.leftAcc(end+1, 1:3) = A{1}(18:20);
                    Dat.leftGyr(end+1, 1:3) = A{1}(21:23);
                    Dat.leftTotalForce(end+1, 1) = A{1}(24);
                    Dat.leftCoP(end+1, 1:2) = A{1}(25:26);
                    
                    Dat.rightPress(end+1, 1:16) = A{1}(27:42);
                    Dat.rightAcc(end+1, 1:3) = A{1}(43:45);
                    Dat.rightGyr(end+1, 1:3) = A{1}(46:48);
                    Dat.rightTotalForce(end+1, 1) = A{1}(49);
                    Dat.rightCoP(end+1, 1:2) = A{1}(50:51);
                else
                    Dat.rest(end+1, 1:length(A{1})) = A{1};
                end
            end
        end
        function Geometry = scaleGeometry(obj)
            A = obj.polygonGeometry;
            scale = 0.27/(max(max(A)) - min(min(A)));
            Geometry = A.*scale;
        end
        function visualizeMoticonGeometry(obj, i)
            A = obj.polygonGeometry;
            %             hold on;
            for j = 1:size(A,1)
                polygon = A(j,:);
                polygon = polygon(~isnan(polygon));
                [r,g,b] = ColorFct(20, obj.data.pressuresRight(i, j), 0);
                fill([polygon(2:2:end), polygon(2)]+190, [polygon(1:2:end), polygon(1)], [r,g,b]);
                
                hold on
                [r,g,b] = ColorFct(20, obj.data.pressuresLeft(i, j), 0);
                fill(-[polygon(2:2:end), polygon(2)]-190, [polygon(1:2:end), polygon(1)], [r,g,b]);
            end
        end
        function [Calcaneus, FirstMetatarsal, FifthMetatarsal] = getLandmarks_Cell_Based(obj)
            A = obj.polygonGeometry;
            Calcaneus.left = .5 * (A(1,7:8) + A(2,1:2));
            
            polygon=(A(9,:));
            polygon=polygon(~isnan(A(9,:)));
            FirstMetatarsal.left = [mean(polygon(1:2:end)), mean(polygon(2:2:end))];
            polygon=(A(13,:));
            polygon=polygon(~isnan(A(13,:)));
            FifthMetatarsal.left = [mean(polygon(1:2:end)), mean(polygon(2:2:end))];
            FirstMetatarsal.right = [-FirstMetatarsal.left(1), FirstMetatarsal.left(2)];
            FifthMetatarsal.right = [-FifthMetatarsal.left(1), FifthMetatarsal.left(2)];
            Calcaneus.right = [-Calcaneus.left(1), Calcaneus.left(2)];
        end
        function showWholeAnimation(obj, range)
            if nargin <= 1
                range = 1:5:obj.data.frames;
            end
            
            obj.visualizeMoticonGeometry(range(1)); axis equal; hold on;
            %             tic
            for i = range
                obj.visualizeMoticonGeometry(i);
                drawnow
            end
            %             toc
        end
    end
    
end